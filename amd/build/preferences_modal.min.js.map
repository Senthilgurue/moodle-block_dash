{"version":3,"sources":["../src/preferences_modal.js"],"names":["define","$","jqueryui","Str","ModalFactory","ModalEvents","Fragment","Ajax","PreferencesModal","selector","contextid","onCloseCallback","init","prototype","modal","triggers","get_string","then","title","create","type","types","DEFAULT","body","getBody","bind","setLarge","getRoot","on","shown","setBody","submitFormAjax","save","submitForm","bodyRendered","sortable","items","handle","axis","hidden","e","window","onbeforeunload","formdata","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","formData","closeWhenDone","response","validationerrors","hide","handleFormSubmissionFailure","data","preventDefault","invalid","merge","find","length","first","focus","serialize","call","methodname","args","done","fail","getModal","submit"],"mappings":"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","sourcesContent":["/**\n * Add a create new group modal to the page.\n *\n * @module     core_group/newgroup\n * @class      PreferencesModal\n * @package    core_group\n * @copyright  2017 Damyon Wiese <damyon@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'jqueryui', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax'],\n    function($, jqueryui, Str, ModalFactory, ModalEvents, Fragment, Ajax) {\n\n    /**\n     * Constructor\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @param {int} contextid\n     *\n     * Each call to init gets it's own instance of this class.\n     */\n    var PreferencesModal = function(selector, contextid, onCloseCallback) {\n        this.contextid = contextid;\n        this.onCloseCallback = onCloseCallback;\n        this.init(selector);\n    };\n\n    /**\n     * @var {Modal} modal\n     * @private\n     */\n    PreferencesModal.prototype.modal = null;\n\n    /**\n     * @var {int} contextid\n     * @private\n     */\n    PreferencesModal.prototype.contextid = -1;\n\n    /**\n     * Initialise the class.\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @private\n     * @return {Promise}\n     */\n    PreferencesModal.prototype.init = function(selector) {\n        var triggers = $(selector);\n        // Fetch the title string.\n        return Str.get_string('editpreferences', 'block_dash').then(function(title) {\n            // Create the modal.\n            return ModalFactory.create({\n                type: ModalFactory.types.DEFAULT,\n                title: title,\n                body: this.getBody()\n            }, triggers);\n        }.bind(this)).then(function(modal) {\n            // Keep a reference to the modal.\n            this.modal = modal;\n\n            // Forms are big, we want a big modal.\n            this.modal.setLarge();\n\n            // We want to reset the form every time it is opened.\n            this.modal.getRoot().on(ModalEvents.shown, function() {\n                this.modal.setBody(this.getBody());\n            }.bind(this));\n\n            this.modal.getRoot().on('change', '#id_config_preferences_layout', this.submitFormAjax.bind(this, false));\n\n            // We catch the modal save event, and use it to submit the form inside the modal.\n            // Triggering a form submission will give JS validation scripts a chance to check for errors.\n            this.modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\n            // We also catch the form submit event and use it to submit the form with ajax.\n            this.modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this, true));\n\n            this.modal.getRoot().on(ModalEvents.bodyRendered, function(e) {\n                $(\"#fgroup_id_available_fields .form-inline > fieldset > div\").sortable({\n                    items: \".form-check-inline.fitem\",\n                    handle: \".drag-handle\",\n                    axis: \"y\"\n                });\n            });\n\n            this.modal.getRoot().on(ModalEvents.hidden, function(e) {\n                // Prevent \"changes may be lost\" popup.\n                window.onbeforeunload = null;\n                if (this.onCloseCallback) {\n                    this.onCloseCallback(e);\n                }\n            }.bind(this));\n\n            return this.modal;\n        }.bind(this));\n    };\n\n    /**\n     * @method getBody\n     * @private\n     * @return {Promise}\n     */\n    PreferencesModal.prototype.getBody = function(formdata) {\n        if (typeof formdata === \"undefined\") {\n            formdata = {};\n        }\n        // Get the content of the modal.\n        var params = {jsonformdata: JSON.stringify(formdata)};\n        return Fragment.loadFragment('block_dash', 'block_preferences_form', this.contextid, params);\n    };\n\n    /**\n     * @method handleFormSubmissionResponse\n     * @private\n     * @return {Promise}\n     */\n    PreferencesModal.prototype.handleFormSubmissionResponse = function(formData, closeWhenDone, response) {\n        if (response.validationerrors || !closeWhenDone) {\n            this.modal.setBody(this.getBody(formData));\n        } else if (closeWhenDone) {\n            this.modal.hide();\n        }\n    };\n\n    /**\n     * @method handleFormSubmissionFailure\n     * @private\n     * @return {Promise}\n     */\n    PreferencesModal.prototype.handleFormSubmissionFailure = function(data) {\n        // Oh noes! Epic fail :(\n        // Ah wait - this is normal. We need to re-display the form with errors!\n        this.modal.setBody(this.getBody(data));\n    };\n\n    /**\n     * Private method\n     *\n     * @method submitFormAjax\n     * @private\n     * @param {Event} e Form submission event.\n     * @param {boolean} closeWhenDone If true modal will close after successful submission.\n     */\n    PreferencesModal.prototype.submitFormAjax = function(closeWhenDone, e) {\n        // We don't want to do a real form submission.\n        e.preventDefault();\n\n        // Now the change events have run, see if there are any \"invalid\" form fields.\n        var invalid = $.merge(\n            this.modal.getRoot().find('[aria-invalid=\"true\"]'),\n            this.modal.getRoot().find('.error')\n        );\n\n        // If we found invalid fields, focus on the first one and do not submit via ajax.\n        if (invalid.length) {\n            invalid.first().focus();\n            return;\n        }\n\n        // Convert all the form elements values to a serialised string.\n        var formData = this.modal.getRoot().find('form').serialize();\n\n        // Now we can continue...\n        Ajax.call([{\n            methodname: 'block_dash_submit_preferences_form',\n            args: {\n                contextid: this.contextid,\n                jsonformdata: JSON.stringify(formData)\n            },\n            done: this.handleFormSubmissionResponse.bind(this, formData, closeWhenDone),\n            fail: this.handleFormSubmissionFailure.bind(this, formData)\n        }]);\n    };\n\n    PreferencesModal.prototype.getModal = function() {\n        return this.modal;\n    };\n\n    /**\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n     *\n     * @method submitForm\n     * @param {Event} e Form submission event.\n     * @private\n     */\n    PreferencesModal.prototype.submitForm = function(e) {\n        e.preventDefault();\n        this.modal.getRoot().find('form').submit();\n    };\n\n    return PreferencesModal;\n});\n"],"file":"preferences_modal.min.js"}